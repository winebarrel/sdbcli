#!/usr/bin/env ruby
$LOAD_PATH << File.join(File.expand_path(File.dirname(__FILE__)), '..', 'lib')

Version = '0.2.0'
HISTORY_FILE = File.join((ENV['HOME'] || ENV['USERPROFILE'] || '.'), '.sdbcli_history')

require 'rubygems'
require 'sdbcli'

require 'optparse'
require 'readline'
require 'yaml'

access_key_id     = ENV['AWS_ACCESS_KEY_ID']
secret_access_key = ENV['AWS_SECRET_ACCESS_KEY']
sdb_endpoint      = ENV['SDB_ENDPOINT'] || 'sdb.amazonaws.com'

ARGV.options do |opt|
  opt.on('-k', '--access-key=ACCESS_KEY') {|v| access_key_id = v }
  opt.on('-s', '--secret-key=SECRET_KEY') {|v| secret_access_key = v }
  opt.on('-e', '--endpoint=ENDPOINT') {|v| sdb_endpoint = v }
  opt.parse!

  unless access_key_id and secret_access_key and sdb_endpoint
    puts opt.help
    exit 1
  end
end

$runner = SimpleDB::Runner.new(access_key_id, secret_access_key, sdb_endpoint)

def execute(query)
  query = query.strip.sub(/\s*;\Z/, '')
  inline = true

  if query =~ /\s*\\G\Z/i
    query = query.sub(/\s*\\G\Z/i, '')
    inline = false
  end

  out = $runner.execute(query, inline)

  if out
    out = YAML.dump(out)
    out << "\n" unless out =~ /\n\n\Z/
    puts out
  end
end

unless $stdin.tty?
  queries = $stdin.read

  queries.split(';').each do |query|
    next if /\A\s*\Z/ =~ query
    execute(query)
  end

  exit 0
end

def help
  <<-EOS
SHOW domains
  displays a domain list

CREATE domain domain_name
  creates a domain

DROP DOMAIN domain_name
  deletes a domain

GET [attr_list] FROM domain_name WHERE itemName = '...'
  gets the attribute of an item

INSERT INTO domain_name (itemName, attr1, ...) values ('name', 'val1', ...)
  creates an item

UPDATE domain_name set attr1 = 'val1', ... where itemName = '...'
  updates an item

DELETE [attr1, ...] FROM domain_name itemName = '...'
  deletes the attribute of an item or an item

SELECT output_list FROM domain_name [where expression] [sort_instructions] [limit limit]
  queries using the SELECT statement

    EOS
end

if File.exist?(HISTORY_FILE)
  open(HISTORY_FILE) do |f|
    f.each_line do |line|
      line = line.strip
      Readline::HISTORY.push(line) unless line.empty?
    end
  end
end

at_exit do
  unless Readline::HISTORY.empty?
    open(HISTORY_FILE, 'a') do |f|
      Readline::HISTORY.each do |line|
        next if /\A\s*\Z/ =~ line
        f.puts line
      end
    end
  end
end

while buf = Readline.readline("#{$runner.region || 'unknown'}> ", true)
  if /\A\s*\Z/ =~ buf
    Readline::HISTORY.pop
    next
  end

  begin
    case buf.downcase
    when 'help'
      puts help
    when 'exit', 'quit'
      exit
    when 'version'
      puts "sdbcli #{Version}"
    else
      execute(buf)
    end
  rescue => e
    puts e.message.strip
  end
end
