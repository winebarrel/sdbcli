#!/usr/bin/env ruby
$LOAD_PATH << File.join(File.dirname(__FILE__), '..', 'lib')

Version = '1.1.0'
HISTORY_FILE = File.join((ENV['HOME'] || ENV['USERPROFILE'] || '.'), '.sdbcli_history')
HISTSIZE = 500
SELECT_LIMIT = 2500

require 'rubygems'
require 'sdbcli'

require 'optparse'
require 'readline'
require 'strscan'
require 'syck' if /\A1\.9/ =~ RUBY_VERSION
require 'yaml'
require 'json'

access_key_id     = ENV['AWS_ACCESS_KEY_ID']
secret_access_key = ENV['AWS_SECRET_ACCESS_KEY']
sdb_endpoint      = ENV['SDB_ENDPOINT'] || ENV['SDB_REGION'] || 'sdb.amazonaws.com'
command = nil
$format = :yaml
$consistent = false
import = nil
export = nil
export_retry = 3
timeout = 60

ARGV.options do |opt|
  opt.on('-k', '--access-key=ACCESS_KEY') {|v| access_key_id = v }
  opt.on('-s', '--secret-key=SECRET_KEY') {|v| secret_access_key = v }
  opt.on('-r', '--region=REGION') {|v| sdb_endpoint = v }
  opt.on('-e', '--eval=COMMAND') {|v| command = v }
  opt.on('-f', '--format=YAML_OR_JSON', [:yaml, :json]) {|v| $format = v }
  opt.on('-c', '--consistent') { $consistent = true }
  opt.on('-t', '--timeout=SECOND', Integer) {|v| timeout = v.to_i }
  opt.on(''  , '--import=DOMAIN,FILE') {|v| import = v.split(/\s*,\s*/, 2) + [false] }
  opt.on(''  , '--import-replace=DOMAIN,FILE') {|v| import = v.split(/\s*,\s*/, 2) + [true] }
  opt.on(''  , '--export=DOMAIN,FILE') {|v| export = v.split(/\s*,\s*/, 2) }
  opt.on(''  , '--export-retry=NUM', Integer) {|v| export_retry = v.to_i }
  opt.parse!

  unless access_key_id and secret_access_key and sdb_endpoint
    puts opt.help
    exit 1
  end
end

$runner = SimpleDB::Runner.new(access_key_id, secret_access_key, sdb_endpoint)
$runner.timeout = timeout

def output_error(msg, strip = false)
  case $format
  when :yaml
    msg = "# #{msg}"
  when :json
    msg = "// #{msg}"
  else
    msg = "# #{msg}"
  end

  msg << "\n\n" unless strip
  $stderr.puts msg
end

def execute(src, show_rows = false)
  ss = StringScanner.new(src.dup)
  buf = ''

  until ss.eos?
    if (tok = ss.scan %r{[^-`'";\\/#]+})
      buf << tok
    elsif (tok = ss.scan /`(?:[^`]|``)*`/)
      buf << tok
    elsif (tok = ss.scan /'(?:[^']|'')*'/) #'
      buf << tok
    elsif (tok = ss.scan /"(?:[^"]|"")*"/) #"
      buf << tok
    elsif (tok = ss.scan %r{/\*/?(\n|[^/]|[^*]/)*\*/})
      # nothing to do
    elsif (tok = ss.scan /--[^\r\n]*(?:\r\n|\r|\n|\Z)/)
      # nothing to do
    elsif (tok = ss.scan /#[^\r\n]*(?:\r\n|\r|\n|\Z)/)
      # nothing to do
    elsif (tok = ss.scan /(?:;|\\G)/)
      src.replace(ss.rest)
      query = buf
      buf = ''

      if tok == '\G'
        inline = false
      else
        inline = true
      end

      if query.strip.empty?
        output_error('No query specified')
        next
      end

      out = $runner.execute(query, inline, $consistent)

      if out.kind_of?(Integer)
        puts case $format
             when :yaml
               "# #{out} #{out > 1 ? 'rows' : 'row'} changed"
             when :json
               "// #{out} #{out > 1 ? 'rows' : 'row'} changed"
             else
               "# #{out} #{out > 1 ? 'rows' : 'row'} changed"
             end
      elsif out
        str = nil

        case $format
        when :yaml
          str = YAML.dump(out)
        when :json
          if out.kind_of?(Array) and inline
            str = "[\n"
            out.each_with_index do |item, i|
              str << "  #{item.to_json}"
              str << ',' if i < (out.length - 1)
              str << "\n"
            end
            str << "]"
          else
            str = JSON.pretty_generate(out)
          end
        else
          output_error('Unknown format')
        end

        str.sub!(/(?:\r\n|\r|\n)*\Z/, "\n")

        if show_rows and out.kind_of?(Array)
          rows_msg = nil

          case $format
          when :yaml
            rows_msg = "# #{out.length} #{out.length > 1 ? 'rows' : 'row'} in set\n"
          when :json
            rows_msg = "// #{out.length} #{out.length > 1 ? 'rows' : 'row'} in set\n"
          else
            rows_msg = "# #{out.length} #{out.length > 1 ? 'rows' : 'row'} in set\n"
          end

          str << rows_msg
        end

        str << "\n"
        puts str
      end
    elsif (tok = ss.scan /./)
      buf << tok
    end
  end

  src.replace(buf.strip)
  buf
end

# export mode
if export
  export_domain, export_file = export

  begin
    export_file = (export_file == '-') ? $stdout : open(export_file, 'wb')

    case $format
    when :yaml
      export_file.puts '---'
    when :json
      export_file.puts '['
    else
      raise 'must not happen'
    end

    query = "SELECT * FROM #{export_domain} "
    query_expr = "WHERE itemName() IS NOT NULL ORDER BY itemName() LIMIT #{SELECT_LIMIT}"
    rownum = 0

    loop do
      items = nil

      export_retry.times do |i|
        begin
          items = $runner.execute(query + query_expr, true, $consistent)
          break
        rescue Timeout::Error => e
          raise e if i >= (export_retry - 1)
        end

        output_error("Retry...", true)
      end

      break if items.empty?
      rownum += items.length

      case $format
      when :yaml
        export_file.puts YAML.dump(items).sub(/\A---\s*/, '').strip
      when :json
        export_file.print "," if rownum > SELECT_LIMIT
        items.each_with_index do |item, i|
          row = item.to_json
          row << ',' if i < (items.length - 1)
          export_file.puts row
        end
      else
        raise 'must not happen'
      end

      tail_item_name = "'" + items.last[0].gsub(/'/, "''") + "'"
      query_expr = "WHERE itemName() > #{tail_item_name} ORDER BY itemName() LIMIT #{SELECT_LIMIT}"

      output_error("#{rownum} #{rownum > 1 ? 'rows' : 'row'} was outputted...", true)
    end

    output_error("#{rownum} #{rownum > 1 ? 'rows' : 'row'} was processed", true)
  rescue => e
    output_error e.message.strip
    exit 1
  end

  case $format
  when :yaml
  when :json
    export_file.puts ']'
  else
    raise 'must not happen'
  end

  begin
    if export_file.kind_of?(IO) and export_file != $stdout and not export_file.closed?
      export_file.close
    end
  rescue => e
    output_error e.message.strip
    exit 1
  end

  exit 0
end

# import mode
if import
  import_domain, import_file, import_as_replace = import

  unless import_file == '-' or File.exist?(import_file)
    output_error("No such file: #{import_file}")
    exit 1
  end

  begin
    items = case $format
            when :yaml
              if import_file == '-'
                YAML.load($stdin)
              else
                YAML.load_file(import_file)
              end
            when :json
              if import_file == '-'
                JSON.load($stdin)
              else
                open(import_file) {|f| JSON.load(f) }
              end
            else
              raise 'must not happen'
            end

    unless items.kind_of?(Array)
      output_error('Route object is not Array')
      exit 1
    end

    rownum = 0

    until (chunk = items.slice!(0, SELECT_LIMIT)).empty?
      rownum += chunk.length

      if import_as_replace
        $runner.driver.update(import_domain, chunk)
      else
        $runner.driver.insert(import_domain, chunk)
      end

      output_error("#{rownum} #{rownum > 1 ? 'rows' : 'row'} was inputted...", true)
    end

    output_error("#{rownum} #{rownum > 1 ? 'rows' : 'row'} was processed", true)

    exit 0
  rescue => e
    output_error e.message.strip
    exit 1
  end
end

# eval mode
if not $stdin.tty? or command
  src = command || $stdin.read.strip

  unless src =~ /\s*(?:;|\\G)\Z/i
    src << ';'
  end

  begin
    execute(src)
    exit 0
  rescue => e
    output_error e.message.strip
    exit 1
  end
end

def help
  <<-EOS
# Explanatory notes of a query

SHOW DOMAINS
  displays a domain list

SHOW REGIONS
  displays a region list

CREATE domain domain_name
  creates a domain

DROP DOMAIN domain_name
  deletes a domain

GET [attr_list] FROM domain_name WHERE itemName = '...'
  gets the attribute of an item

INSERT INTO domain_name (itemName, attr1, ...) VALUES ('name1', 'val1', ...), ('name2', 'val2', ...), ...
  creates an item

UPDATE domain_name {SET|ADD} attr1 = 'val1', ... WHERE itemName = '...'
UPDATE domain_name {SET|ADD} attr1 = 'val1', ... [WHERE expression] [sort_instructions] [LIMIT limit]
  updates an item

DELETE [attr1, ...] FROM domain_name WHERE itemName = '...'
DELETE [attr1, ...] FROM domain_name WHERE [WHERE expression] [sort_instructions] [LIMIT limit]
  deletes the attribute of an item or an item

SELECT output_list FROM domain_name [WHERE expression] [sort_instructions] [LIMIT limit]
  queries using the SELECT statement
  see http://docs.aws.amazon.com/AmazonSimpleDB/latest/DeveloperGuide/UsingSelect.html

DESC domain_name
  displays information about the domain

USE region_or_endpoint
  changes an endpoint


# List of commands

.help                      displays this message
.quit | .exit              exits sdbcli
.format     (yaml|json)?   displays a format or changes it
.consistent (true|false)?  displays ConsistentRead parameter or changes it
.timeout    SECOND         displays a timeout second or changes it
.version                   displays a version

    EOS
end

if File.exist?(HISTORY_FILE)
  open(HISTORY_FILE) do |f|
    f.each_line do |line|
      line = line.strip
      Readline::HISTORY.push(line) unless line.empty?
    end
  end
end

at_exit do
  unless Readline::HISTORY.empty?
    open(HISTORY_FILE, 'wb') do |f|
      (Readline::HISTORY.to_a.slice(-(Readline::HISTORY.length < HISTSIZE ? Readline::HISTORY.length : HISTSIZE)..-1) || []).each do |line|
        next if /\A\s*\Z/ =~ line
        f.puts line
      end
    end
  end
end

src = ''
prompt1 = lambda { "#{$runner.region || 'unknown'}> " }
prompt2 = lambda { "#{' ' * (($runner.region || 'unknown').length - 1)}-> " }
prompt = prompt1.call

while buf = Readline.readline(prompt, true)
  if /\A\s*\Z/ =~ buf
    Readline::HISTORY.pop
    next
  end

  if src.empty? and buf =~ /\A\.(.+)/
    cmd, arg = $1.split(/\s+/i, 2)
    r = /\A#{Regexp.compile(cmd.downcase)}/

    if r =~ 'help'
      puts help
    elsif r =~ 'exit' or r =~ 'quit'
      exit
    elsif r =~ 'format'
      case (arg || '').strip
      when ''
        puts $format
      when 'yaml'
        $format = :yaml
      when 'json'
        $format = :json
      else
        output_error('Unknown format')
      end
    elsif r =~ 'consistent'
      case (arg || '').strip
      when ''
        puts $consistent
      when 'true'
        $consistent = true
      when 'false'
        $consistent = false
      else
        output_error('Invalid argument')
      end
    elsif r =~ 'timeout'
      case (arg || '').strip
      when ''
        puts $runner.timeout
      when /\d+/
        $runner.timeout = arg.to_i
      else
        output_error('Invalid argument')
      end
    elsif r =~ 'version'
      puts "sdbcli #{Version}"
    else
      output_error('Unknown command')
    end
  else
    rv = nil

    begin
      if src.empty?
        src << buf
      else
        src << ("\n" + buf)
      end

      execute(src, true)
    rescue => e
      output_error e.message.strip
    end

    prompt = src.empty? ? prompt1.call : prompt2.call
  end
end
