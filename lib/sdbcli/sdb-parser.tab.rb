#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'strscan'

module SimpleDB

class Parser < Racc::Parser

module_eval(<<'...end sdb-parser.y/module_eval...', 'sdb-parser.y', 274)

KEYWORDS = %w(
  ADD
  AND
  ASC
  BETWEEN
  BY
  CREATE
  DELETE
  DESCRIBE
  DESC
  DOMAINS
  DOMAIN
  DROP
  EVERY
  FROM
  GET
  INSERT
  INTERSECTION
  INTO
  IN
  IS
  ITEMNAME
  LIKE
  LIMIT
  NOT
  ORDER
  OR
  REGIONS
  SET
  SHOW
  UPDATE
  USE
  VALUES
  WHERE
)

KEYWORD_REGEXP = Regexp.compile("#{KEYWORDS.join '|'}\\b", Regexp::IGNORECASE)

def initialize(obj)
  src = obj.is_a?(IO) ? obj.read : obj.to_s
  @ss = StringScanner.new(src)
end

@@structs = {}

def struct(name, attrs = {})
  unless (clazz = @@structs[name])
    clazz = attrs.empty? ? Struct.new(name.to_s) : Struct.new(name.to_s, *attrs.keys)
    @@structs[name] = clazz
  end

  obj = clazz.new

  attrs.each do |key, val|
    obj.send("#{key}=", val)
  end

  return obj
end
private :struct

def scan
  tok = nil

  until @ss.eos?
    if (tok = @ss.scan /\s+/)
      # nothing to do
    elsif (tok = @ss.scan /(?:!=|>=|<=|>|<|=)/)
      yield [tok, tok]
    elsif (tok = @ss.scan KEYWORD_REGEXP)
      yield [tok.upcase.to_sym, tok]
    elsif (tok = @ss.scan /SELECT\b/i)
      yield [:SELECT, tok + @ss.scan(/.*/)]
    elsif (tok = @ss.scan /NEXT\b/i)
      yield [:NEXT, @ss.scan(/\s*\|\s*.*/)]
    elsif (tok = @ss.scan /CUR(RENT)?\b/i)
      yield [:CURRENT, @ss.scan(/\s*\|\s*.*/)]
    elsif (tok = @ss.scan /PAGE\s+\d+/i)
      yield [:PAGE, tok + @ss.scan(/(\s*\|\s*.*)?/)]
    elsif (tok = @ss.scan /NULL\b/i)
      yield [:NULL, nil]
    elsif (tok = @ss.scan /`([^`]|``)*`/)
      yield [:IDENTIFIER, tok.slice(1...-1).gsub(/``/, '`')]
    elsif (tok = @ss.scan /'([^']|'')*'/) #'
      yield [:STRING, tok.slice(1...-1).gsub(/''/, "'")]
    elsif (tok = @ss.scan /"([^"]|"")*"/) #"
      yield [:STRING, tok.slice(1...-1).gsub(/""/, '"')]
    elsif (tok = @ss.scan /\d+(\.\d+)?/)
      yield [:NUMBER, tok]
    elsif (tok = @ss.scan /[,\(\)\*]/)
      yield [tok, tok]
    elsif (tok = @ss.scan /[a-z_$][-0-9a-z_$.]*\b/i)
      yield [:IDENTIFIER, tok]
    else
      raise Racc::ParseError, ('parse error on value "%s"' % @ss.rest.inspect)
    end
  end

  yield [false, '$']
end
private :scan

def parse
  yyparse self, :scan
end

def self.parse(obj)
  self.new(obj).parse
end

def on_error(error_token_id, error_value, value_stack)
  if @stmt_with_expr
    @stmt_with_expr.expr << (error_value + @ss.scan_until(/\Z/))
  else
    super
  end
end

...end sdb-parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    16,     9,    73,    70,    17,    69,    35,    68,    71,    71,
    33,    69,    31,    68,    18,    81,    82,    19,    81,    82,
    20,    21,    22,    23,    24,    56,    25,    26,    27,    42,
    43,    28,    29,    30,    81,    82,    81,    82,   101,   102,
    81,    82,   106,   102,    81,    82,    77,    78,    51,    52,
    81,    82,    81,    82,    63,    64,    57,    58,    61,    61,
    54,    65,    49,    53,    72,    55,    74,    75,    76,    50,
    79,    61,    49,    84,    85,    86,    87,    48,    89,    90,
    91,    47,    93,    46,    45,    44,    41,   100,    40,   103,
    35,    37,    36 ]

racc_action_check = [
     0,     0,    62,    59,     0,    58,    17,    58,    62,    59,
    17,    78,     1,    78,     0,    89,    89,     0,    93,    93,
     0,     0,     0,     0,     0,    48,     0,     0,     0,    27,
    27,     0,     0,     0,    91,    91,    90,    90,    98,    98,
    86,    86,   105,   105,    72,    72,    66,    66,    37,    37,
   102,   102,   103,   103,    53,    53,    49,    50,    51,    52,
    40,    56,    39,    38,    61,    41,    63,    64,    65,    36,
    70,    71,    34,    73,    74,    76,    77,    32,    79,    84,
    85,    31,    87,    30,    29,    28,    26,    94,    24,   100,
    20,    19,    18 ]

racc_action_pointer = [
    -1,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    -1,    76,    84,
    83,   nil,   nil,   nil,    62,   nil,    60,    -1,    78,    77,
    76,    81,    71,   nil,    58,   nil,    62,    29,    57,    48,
    53,    58,   nil,   nil,   nil,   nil,   nil,   nil,    18,    49,
    45,    51,    52,    47,   nil,   nil,    53,   nil,    -2,    -5,
   nil,    54,    -6,    58,    58,    59,    33,   nil,   nil,   nil,
    61,    64,    41,    64,    65,   nil,    65,    59,     4,    68,
   nil,   nil,   nil,   nil,    69,    70,    37,    70,   nil,    12,
    33,    31,   nil,    15,    73,   nil,   nil,   nil,    25,   nil,
    77,   nil,    47,    49,   nil,    29,   nil ]

racc_action_default = [
   -61,   -61,    -1,    -2,    -3,    -4,    -5,    -6,    -7,    -8,
    -9,   -10,   -11,   -12,   -13,   -14,   -15,   -19,   -61,   -61,
   -44,   -46,   -47,   -48,   -61,   -50,   -61,   -61,   -61,   -61,
   -61,   -61,   -61,   -20,   -21,   -57,   -61,   -61,   -61,   -45,
   -61,   -61,   -52,   -53,   -54,   -55,   -56,   107,   -61,   -61,
   -61,   -61,   -61,   -61,   -49,   -51,   -61,   -58,   -61,   -30,
   -37,   -61,   -34,   -41,   -42,   -61,   -61,   -25,   -27,   -28,
   -31,   -61,   -61,   -35,   -61,   -43,   -61,   -61,   -61,   -32,
   -38,   -16,   -17,   -39,   -36,   -61,   -61,   -61,   -26,   -61,
   -61,   -61,   -18,   -61,   -24,   -29,   -33,   -40,   -61,   -59,
   -61,   -22,   -61,   -61,   -60,   -61,   -23 ]

racc_goto_table = [
    83,    67,    98,    34,    59,    62,    39,    14,     7,     8,
    10,    11,   105,    12,    92,    13,     6,    95,    96,    97,
    15,    88,     1,    32,     5,    94,     4,    66,     3,     2,
   104,    80,    38 ]

racc_goto_check = [
    15,    21,    19,    17,    22,    22,    17,    13,     7,     8,
     9,    10,    19,    11,    15,    12,     6,    15,    15,    15,
    14,    21,     1,    16,     5,    18,     4,    20,     3,     2,
    15,    23,    24 ]

racc_goto_pointer = [
   nil,    22,    29,    28,    26,    24,    16,     8,     9,    10,
    11,    13,    15,     7,    20,   -72,     6,   -14,   -62,   -91,
   -31,   -57,   -47,   -40,    12 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    99,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    60,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 36, :_reduce_none,
  1, 36, :_reduce_none,
  1, 36, :_reduce_none,
  1, 36, :_reduce_none,
  1, 36, :_reduce_none,
  1, 36, :_reduce_none,
  1, 36, :_reduce_none,
  1, 36, :_reduce_none,
  1, 36, :_reduce_none,
  1, 36, :_reduce_none,
  1, 36, :_reduce_none,
  1, 36, :_reduce_none,
  1, 36, :_reduce_none,
  1, 36, :_reduce_none,
  1, 36, :_reduce_15,
  1, 50, :_reduce_none,
  1, 50, :_reduce_none,
  8, 37, :_reduce_18,
  0, 51, :_reduce_19,
  1, 51, :_reduce_20,
  1, 51, :_reduce_none,
  3, 53, :_reduce_22,
  5, 53, :_reduce_23,
  8, 38, :_reduce_24,
  1, 55, :_reduce_25,
  3, 55, :_reduce_26,
  1, 56, :_reduce_none,
  1, 56, :_reduce_none,
  8, 39, :_reduce_29,
  4, 39, :_reduce_30,
  5, 39, :_reduce_31,
  6, 39, :_reduce_32,
  8, 40, :_reduce_33,
  4, 40, :_reduce_34,
  5, 40, :_reduce_35,
  6, 40, :_reduce_36,
  1, 57, :_reduce_37,
  3, 57, :_reduce_38,
  3, 58, :_reduce_39,
  8, 41, :_reduce_40,
  4, 41, :_reduce_41,
  4, 41, :_reduce_42,
  5, 41, :_reduce_43,
  0, 59, :_reduce_44,
  1, 59, :_reduce_none,
  1, 42, :_reduce_46,
  1, 43, :_reduce_47,
  1, 43, :_reduce_48,
  3, 45, :_reduce_49,
  1, 44, :_reduce_50,
  3, 46, :_reduce_51,
  2, 47, :_reduce_52,
  2, 47, :_reduce_53,
  2, 48, :_reduce_54,
  2, 49, :_reduce_55,
  2, 49, :_reduce_56,
  1, 52, :_reduce_57,
  3, 52, :_reduce_58,
  1, 54, :_reduce_59,
  3, 54, :_reduce_60 ]

racc_reduce_n = 61

racc_shift_n = 107

racc_token_table = {
  false => 0,
  :error => 1,
  :current_stmt => 2,
  :STRING => 3,
  :NUMBER => 4,
  :GET => 5,
  :FROM => 6,
  :IDENTIFIER => 7,
  :WHERE => 8,
  :ITEMNAME => 9,
  "=" => 10,
  "*" => 11,
  "(" => 12,
  ")" => 13,
  "," => 14,
  :INSERT => 15,
  :INTO => 16,
  :VALUES => 17,
  :UPDATE => 18,
  :SET => 19,
  :ADD => 20,
  :DELETE => 21,
  :SELECT => 22,
  :NEXT => 23,
  :CURRENT => 24,
  :CREATE => 25,
  :DOMAIN => 26,
  :PAGE => 27,
  :DROP => 28,
  :SHOW => 29,
  :DOMAINS => 30,
  :REGIONS => 31,
  :USE => 32,
  :DESC => 33,
  :DESCRIBE => 34 }

racc_nt_base = 35

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "current_stmt",
  "STRING",
  "NUMBER",
  "GET",
  "FROM",
  "IDENTIFIER",
  "WHERE",
  "ITEMNAME",
  "\"=\"",
  "\"*\"",
  "\"(\"",
  "\")\"",
  "\",\"",
  "INSERT",
  "INTO",
  "VALUES",
  "UPDATE",
  "SET",
  "ADD",
  "DELETE",
  "SELECT",
  "NEXT",
  "CURRENT",
  "CREATE",
  "DOMAIN",
  "PAGE",
  "DROP",
  "SHOW",
  "DOMAINS",
  "REGIONS",
  "USE",
  "DESC",
  "DESCRIBE",
  "$start",
  "stmt",
  "get_stmt",
  "insert_stmt",
  "update_stmt",
  "merge_stmt",
  "delete_stmt",
  "select_stmt",
  "next_stmt",
  "page_stmt",
  "create_stmt",
  "drop_stmt",
  "show_stmt",
  "use_stmt",
  "desc_stmt",
  "value",
  "get_output_list",
  "identifier_list",
  "value_list_list",
  "value_list",
  "insert_identifier_list",
  "itemname_identifier",
  "set_clause_list",
  "set_clause",
  "delete_attr_list" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

module_eval(<<'.,.,', 'sdb-parser.y', 19)
  def _reduce_15(val, _values)
               @stmt_with_expr
         
  end
.,.,

# reduce 16 omitted

# reduce 17 omitted

module_eval(<<'.,.,', 'sdb-parser.y', 27)
  def _reduce_18(val, _values)
                    struct(:GET, :domain => val[3], :item_name => val[7], :attr_names => val[1])
             
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 32)
  def _reduce_19(val, _values)
                          []
                    
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 36)
  def _reduce_20(val, _values)
                          []
                    
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'sdb-parser.y', 42)
  def _reduce_22(val, _values)
                          [val[1]]
                    
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 46)
  def _reduce_23(val, _values)
                          val[0] + [val[3]]
                    
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 51)
  def _reduce_24(val, _values)
                      items = val[7].map do |vals|
                    unless val[4].length == vals.length
                      raise Racc::ParseError, 'The number of an attribute and values differs'
                    end

                    attrs = {}
                    val[4].zip(vals).each {|k, v| attrs[k] = v }
                    item_name = attrs.find {|k, v| k =~ /\AitemName\Z/i }

                    unless item_name
                      raise Racc::ParseError,'itemName is not contained in the INSERT statement'
                    end

                    attrs.delete(item_name[0])
                    item_name = item_name[1]

                    [item_name, attrs]
                  end

                  struct(:INSERT, :domain => val[2], :items => items)
                
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 75)
  def _reduce_25(val, _values)
                                 [val[0]]
                           
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 79)
  def _reduce_26(val, _values)
                                 val[0] + [val[2]]
                           
  end
.,.,

# reduce 27 omitted

# reduce 28 omitted

module_eval(<<'.,.,', 'sdb-parser.y', 87)
  def _reduce_29(val, _values)
                      attrs = {}
                  val[3].each {|k, v| attrs[k] = v }
                  struct(:UPDATE, :domain => val[1], :items => [[val[7], attrs]])
                
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 93)
  def _reduce_30(val, _values)
                      attrs = {}
                  val[3].each {|k, v| attrs[k] = v }
                  @stmt_with_expr = struct(:UPDATE_WITH_EXPR, :domain => val[1], :attrs => attrs, :expr => '')
                
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 99)
  def _reduce_31(val, _values)
                      attrs = {}
                  val[3].each {|k, v| attrs[k] = v }
                  @stmt_with_expr = struct(:UPDATE_WITH_EXPR, :domain => val[1], :attrs => attrs, :expr => 'WHERE ')
                
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 105)
  def _reduce_32(val, _values)
                      attrs = {}
                  val[3].each {|k, v| attrs[k] = v }
                  @stmt_with_expr = struct(:UPDATE_WITH_EXPR, :domain => val[1], :attrs => attrs, :expr => 'WHERE itemName')
                
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 112)
  def _reduce_33(val, _values)
                     attrs = {}
                 val[3].each {|k, v| attrs[k] = v }
                 struct(:MERGE, :domain => val[1], :items => [[val[7], attrs]])
               
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 118)
  def _reduce_34(val, _values)
                     attrs = {}
                 val[3].each {|k, v| attrs[k] = v }
                 @stmt_with_expr = struct(:MERGE_WITH_EXPR, :domain => val[1], :attrs => attrs, :expr => '')
               
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 124)
  def _reduce_35(val, _values)
                     attrs = {}
                 val[3].each {|k, v| attrs[k] = v }
                 @stmt_with_expr = struct(:MERGE_WITH_EXPR, :domain => val[1], :attrs => attrs, :expr => 'WHERE ')
               
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 130)
  def _reduce_36(val, _values)
                     attrs = {}
                 val[3].each {|k, v| attrs[k] = v }
                 @stmt_with_expr = struct(:MERGE_WITH_EXPR, :domain => val[1], :attrs => attrs, :expr => 'WHERE itemName')
               
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 137)
  def _reduce_37(val, _values)
                          [val[0]]
                    
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 141)
  def _reduce_38(val, _values)
                          val[0] + [val[2]]
                    
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 146)
  def _reduce_39(val, _values)
                     [val[0], val[2]]
               
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 151)
  def _reduce_40(val, _values)
                      struct(:DELETE, :domain => val[3], :items => [[val[7], val[1]]])
                
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 155)
  def _reduce_41(val, _values)
                      @stmt_with_expr = struct(:DELETE_WITH_EXPR, :domain => val[3], :attrs => val[1],  :expr => '')
                
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 159)
  def _reduce_42(val, _values)
                      @stmt_with_expr = struct(:DELETE_WITH_EXPR, :domain => val[3], :attrs => val[1],  :expr => 'WHERE ')
                
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 163)
  def _reduce_43(val, _values)
                      @stmt_with_expr = struct(:DELETE_WITH_EXPR, :domain => val[3], :attrs => val[1],  :expr => 'WHERE itemName')
                
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 168)
  def _reduce_44(val, _values)
                           []
                     
  end
.,.,

# reduce 45 omitted

module_eval(<<'.,.,', 'sdb-parser.y', 174)
  def _reduce_46(val, _values)
                      query = ''
                  ruby = nil

                  ss = StringScanner.new(val[0])

                  until ss.eos?
                    if (tok = ss.scan /[^`'"|]+/) #'
                      query << tok
                    elsif (tok = ss.scan /`(?:[^`]|``)*`/)
                      query << tok
                    elsif (tok = ss.scan /'(?:[^']|'')*'/) #'
                      query << tok
                    elsif (tok = ss.scan /"(?:[^"]|"")*"/) #"
                      query << tok
                    elsif (tok = ss.scan /\|/)
                      ruby = ss.scan_until(/\Z/)
                    elsif (tok = ss.scan /./)
                      query << tok
                    end
                  end

                  struct(:SELECT, :query => query, :ruby => ruby)
                
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 200)
  def _reduce_47(val, _values)
                    ruby = val[0].sub(/\A\s*\|\s*/, '') if val[0]
                struct(:NEXT, :ruby => ruby)
              
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 206)
  def _reduce_48(val, _values)
                    ruby = val[0].sub(/\A\s*\|\s*/, '') if val[0]
                struct(:CURRENT, :ruby => ruby)
              
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 212)
  def _reduce_49(val, _values)
                      struct(:CREATE, :domain => val[2])
                
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 217)
  def _reduce_50(val, _values)
                    page, ruby = val[0].split(/\s*\|\s*/, 2)
                page = page.split(/\s+/, 2).last.strip.to_i
                struct(:PAGE, :page => page, :ruby => ruby)
              
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 224)
  def _reduce_51(val, _values)
                    struct(:DROP, :domain => val[2])
              
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 229)
  def _reduce_52(val, _values)
                    struct(:SHOW, :operand => :domains)
              
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 233)
  def _reduce_53(val, _values)
                    struct(:SHOW, :operand => :regions)
              
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 237)
  def _reduce_54(val, _values)
                   struct(:USE, :endpoint => val[1])
             
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 241)
  def _reduce_55(val, _values)
                    struct(:DESCRIBE, :domain => val[1])
              
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 245)
  def _reduce_56(val, _values)
                    struct(:DESCRIBE, :domain => val[1])
              
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 250)
  def _reduce_57(val, _values)
                         [val[0]]
                   
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 254)
  def _reduce_58(val, _values)
                         val[0] + [val[2]]
                   
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 259)
  def _reduce_59(val, _values)
                     [val[0]]
               
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 263)
  def _reduce_60(val, _values)
                     [val[0], val[2]].flatten
               
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

end   # class Parser


end # module SimpleDB
