#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'strscan'

module SimpleDB

class Parser < Racc::Parser

module_eval(<<'...end sdb-parser.y/module_eval...', 'sdb-parser.y', 139)

KEYWORDS = %w(
  AND
  ASC
  BETWEEN
  BY
  CREATE
  DELETE
  DESC
  DOMAINS
  DOMAIN
  DROP
  EVERY
  FROM
  GET
  INSERT
  INTERSECTION
  INTO
  IN
  IS
  ITEMNAME
  LIKE
  LIMIT
  NOT
  ORDER
  OR
  SET
  SHOW
  UPDATE
  VALUES
  WHERE
)

KEYWORD_REGEXP = Regexp.compile("#{KEYWORDS.join '|'}\\b", Regexp::IGNORECASE)

def initialize(obj)
  src = obj.is_a?(IO) ? obj.read : obj.to_s
  @ss = StringScanner.new(src)
end

@@structs = {}

def struct(name, attrs = {})
  unless (clazz = @@structs[name])
    clazz = attrs.empty? ? Struct.new(name.to_s) : Struct.new(name.to_s, *attrs.keys)
    @@structs[name] = clazz
  end

  obj = clazz.new

  attrs.each do |key, val|
    obj.send("#{key}=", val)
  end

  return obj
end
private :struct

def scan
  tok = nil

  until @ss.eos?
    if (tok = @ss.scan /\s+/)
      # nothing to do
    elsif (tok = @ss.scan /(?:!=|>=|<=|>|<|=)/)
      yield [tok, tok]
    elsif (tok = @ss.scan KEYWORD_REGEXP)
      yield [tok.upcase.to_sym, tok]
    elsif (tok = @ss.scan /SELECT\b/i)
      yield [:SELECT, tok + @ss.scan(/.*/)]
    elsif (tok = @ss.scan /NULL\b/i)
      yield [:NULL, nil]
    elsif (tok = @ss.scan /`([^`]|``)*`/)
      yield [:IDENTIFIER, tok.slice(1...-1).gsub(/``/, '`')]
    elsif (tok = @ss.scan /'([^']|'')*'/) #'
      yield [:VALUE, tok.slice(1...-1).gsub(/''/, "'")]
    elsif (tok = @ss.scan /"([^"]|"")*"/) #"
      yield [:VALUE, tok.slice(1...-1).gsub(/""/, '"')]
    elsif (tok = @ss.scan /(0|[1-9]\d*)/)
      yield [:NATURAL_NUMBER, tok.to_i]
    elsif (tok = @ss.scan /[,\(\)\*]/)
      yield [tok, tok]
    elsif (tok = @ss.scan /[a-z_$][0-9a-z_$]*\b/i)
      yield [:IDENTIFIER, tok]
    else
      raise Racc::ParseError, ('parse error on value "%s"' % @ss.rest.inspect)
    end
  end

  yield [false, '$']
end
private :scan

def parse
  yyparse self, :scan
end

def self.parse(obj)
  self.new(obj).parse
end

...end sdb-parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    10,    11,    51,    23,    50,    56,    49,    57,    21,    12,
    46,    73,    52,    74,    50,    13,    49,    14,    15,    16,
    30,    17,    18,    31,    32,    33,    34,    35,    36,    33,
    37,    38,    39,    40,    41,    44,    45,    29,    28,    23,
    53,    54,    55,    25,    58,    44,    60,    61,    62,    63,
    24,    65,    66,    67,    68,    69,    70,    72,    19,    75 ]

racc_action_check = [
     0,     0,    42,    11,    57,    47,    57,    47,    11,     0,
    39,    71,    42,    71,    41,     0,    41,     0,     0,     0,
    18,     0,     0,    19,    20,    22,    24,    25,    26,    27,
    28,    29,    32,    33,    34,    35,    36,    17,    16,    14,
    44,    45,    46,    13,    51,    52,    53,    54,    55,    56,
    12,    58,    61,    62,    63,    65,    66,    68,     1,    74 ]

racc_action_pointer = [
    -2,    58,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    -2,    38,    38,    34,   nil,    16,    15,    -5,    23,
    20,   nil,     9,   nil,    21,     9,    24,    13,    25,    26,
   nil,   nil,    27,    28,    21,    30,    31,   nil,   nil,     4,
   nil,     9,    -4,   nil,    32,    35,    35,    -9,   nil,   nil,
   nil,    37,    40,    37,    40,    40,    34,    -1,    43,   nil,
   nil,    44,    44,    41,   nil,    46,    47,   nil,    48,   nil,
   nil,    -3,   nil,   nil,    50,   nil ]

racc_action_default = [
   -34,   -34,    -1,    -2,    -3,    -4,    -5,    -6,    -7,    -8,
    -9,   -11,   -34,   -34,   -24,   -26,   -34,   -34,   -34,   -34,
   -34,   -12,   -13,   -30,   -34,   -34,   -34,   -25,   -34,   -34,
   -29,    76,   -34,   -34,   -34,   -34,   -34,   -27,   -28,   -34,
   -31,   -34,   -34,   -20,   -34,   -34,   -34,   -34,   -15,   -17,
   -18,   -34,   -34,   -34,   -34,   -34,   -34,   -34,   -34,   -21,
   -22,   -34,   -34,   -34,   -16,   -34,   -34,   -10,   -34,   -19,
   -23,   -34,   -32,   -14,   -34,   -33 ]

racc_goto_table = [
    43,    22,    48,     9,    27,     5,     6,     7,     8,     4,
    20,     1,    47,    71,     3,    42,     2,    59,    64,    26 ]

racc_goto_check = [
    16,    11,    14,     9,    11,     5,     6,     7,     8,     4,
    10,     1,    12,    13,     3,    15,     2,    16,    14,    17 ]

racc_goto_pointer = [
   nil,    11,    16,    14,     9,     5,     6,     7,     8,     3,
    -1,   -10,   -29,   -55,   -39,   -20,   -35,     5 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 27, :_reduce_none,
  1, 27, :_reduce_none,
  1, 27, :_reduce_none,
  1, 27, :_reduce_none,
  1, 27, :_reduce_none,
  1, 27, :_reduce_none,
  1, 27, :_reduce_none,
  1, 27, :_reduce_none,
  1, 27, :_reduce_none,
  8, 28, :_reduce_10,
  0, 36, :_reduce_11,
  1, 36, :_reduce_12,
  1, 36, :_reduce_none,
  10, 29, :_reduce_14,
  1, 38, :_reduce_15,
  3, 38, :_reduce_16,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  8, 30, :_reduce_19,
  1, 41, :_reduce_20,
  3, 41, :_reduce_21,
  3, 42, :_reduce_22,
  8, 31, :_reduce_23,
  0, 43, :_reduce_24,
  1, 43, :_reduce_none,
  1, 32, :_reduce_26,
  3, 33, :_reduce_27,
  3, 34, :_reduce_28,
  2, 35, :_reduce_29,
  1, 37, :_reduce_30,
  3, 37, :_reduce_31,
  1, 39, :_reduce_32,
  3, 39, :_reduce_33 ]

racc_reduce_n = 34

racc_shift_n = 76

racc_token_table = {
  false => 0,
  :error => 1,
  :use_stmt => 2,
  :GET => 3,
  :FROM => 4,
  :IDENTIFIER => 5,
  :WHERE => 6,
  :ITEMNAME => 7,
  "=" => 8,
  :VALUE => 9,
  "*" => 10,
  :INSERT => 11,
  :INTO => 12,
  "(" => 13,
  ")" => 14,
  :VALUES => 15,
  "," => 16,
  :UPDATE => 17,
  :SET => 18,
  :DELETE => 19,
  :SELECT => 20,
  :CREATE => 21,
  :DOMAIN => 22,
  :DROP => 23,
  :SHOW => 24,
  :DOMAINS => 25 }

racc_nt_base = 26

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "use_stmt",
  "GET",
  "FROM",
  "IDENTIFIER",
  "WHERE",
  "ITEMNAME",
  "\"=\"",
  "VALUE",
  "\"*\"",
  "INSERT",
  "INTO",
  "\"(\"",
  "\")\"",
  "VALUES",
  "\",\"",
  "UPDATE",
  "SET",
  "DELETE",
  "SELECT",
  "CREATE",
  "DOMAIN",
  "DROP",
  "SHOW",
  "DOMAINS",
  "$start",
  "stmt",
  "get_stmt",
  "insert_stmt",
  "update_stmt",
  "delete_stmt",
  "select_stmt",
  "create_stmt",
  "drop_stmt",
  "show_stmt",
  "get_output_list",
  "identifier_list",
  "insert_identifier_list",
  "value_list",
  "itemname_identifier",
  "set_clause_list",
  "set_clause",
  "delete_attr_list" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

module_eval(<<'.,.,', 'sdb-parser.y', 15)
  def _reduce_10(val, _values)
                    struct(:GET, :domain => val[3], :item_name => val[7], :attr_names => val[1])
             
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 20)
  def _reduce_11(val, _values)
                          []
                    
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 24)
  def _reduce_12(val, _values)
                          []
                    
  end
.,.,

# reduce 13 omitted

module_eval(<<'.,.,', 'sdb-parser.y', 30)
  def _reduce_14(val, _values)
                    unless val[4].length == val[8].length
                  raise Racc::ParseError, 'The number of an attribute and values differs'
                end

                attrs = {}
                val[4].zip(val[8]).each {|k, v| attrs[k] = v }
                item_name = attrs.find {|k, v| k =~ /\AitemName\Z/i }

                unless item_name
                  raise Racc::ParseError,'itemName is not contained in the INSERT statement'
                end

                attrs.delete(item_name[0])
                item_name = item_name[1]

                struct(:INSERT, :domain => val[2], :item_name => item_name, :attrs => attrs)
              
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 51)
  def _reduce_15(val, _values)
                                 [val[0]]
                           
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 55)
  def _reduce_16(val, _values)
                                 val[0] + [val[2]]
                           
  end
.,.,

# reduce 17 omitted

# reduce 18 omitted

module_eval(<<'.,.,', 'sdb-parser.y', 63)
  def _reduce_19(val, _values)
                    attrs = {}
                val[3].each {|k, v| attrs[k] = v }
                struct(:UPDATE, :domain => val[1], :items => [[val[7], attrs]])
              
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 70)
  def _reduce_20(val, _values)
                          [val[0]]
                    
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 74)
  def _reduce_21(val, _values)
                          val[0] + [val[2]]
                    
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 79)
  def _reduce_22(val, _values)
                     [val[0], val[2]]
               
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 84)
  def _reduce_23(val, _values)
                      struct(:DELETE, :domain => val[3], :items => [[val[7], val[1]]])
                
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 89)
  def _reduce_24(val, _values)
                           []
                     
  end
.,.,

# reduce 25 omitted

module_eval(<<'.,.,', 'sdb-parser.y', 95)
  def _reduce_26(val, _values)
                      struct(:SELECT, :query => val[0])
                
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 100)
  def _reduce_27(val, _values)
                      struct(:CREATE, :domain => val[2])
                
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 105)
  def _reduce_28(val, _values)
                    struct(:DROP, :domain => val[2])
              
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 110)
  def _reduce_29(val, _values)
                    struct(:SHOW, :operand => :domains)
              
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 115)
  def _reduce_30(val, _values)
                                   [val[0]]
                             
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 119)
  def _reduce_31(val, _values)
                                   val[0] + [val[2]]
                             
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 124)
  def _reduce_32(val, _values)
                               [val[0]]
                         
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 128)
  def _reduce_33(val, _values)
                              [val[0], val[2]].flatten
                         
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

end   # class Parser


end # module SimpleDB
