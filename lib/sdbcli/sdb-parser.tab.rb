#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'strscan'

module SimpleDB

class Parser < Racc::Parser

module_eval(<<'...end sdb-parser.y/module_eval...', 'sdb-parser.y', 256)

KEYWORDS = %w(
  ADD
  AND
  ASC
  BETWEEN
  BY
  CREATE
  DELETE
  DESCRIBE
  DESC
  DOMAINS
  DOMAIN
  DROP
  EVERY
  FROM
  GET
  INSERT
  INTERSECTION
  INTO
  IN
  IS
  ITEMNAME
  LIKE
  LIMIT
  NOT
  ORDER
  OR
  REGIONS
  SET
  SHOW
  UPDATE
  USE
  VALUES
  WHERE
)

KEYWORD_REGEXP = Regexp.compile("#{KEYWORDS.join '|'}\\b", Regexp::IGNORECASE)

def initialize(obj)
  src = obj.is_a?(IO) ? obj.read : obj.to_s
  @ss = StringScanner.new(src)
end

@@structs = {}

def struct(name, attrs = {})
  unless (clazz = @@structs[name])
    clazz = attrs.empty? ? Struct.new(name.to_s) : Struct.new(name.to_s, *attrs.keys)
    @@structs[name] = clazz
  end

  obj = clazz.new

  attrs.each do |key, val|
    obj.send("#{key}=", val)
  end

  return obj
end
private :struct

def scan
  tok = nil

  until @ss.eos?
    if (tok = @ss.scan /\s+/)
      # nothing to do
    elsif (tok = @ss.scan /(?:!=|>=|<=|>|<|=)/)
      yield [tok, tok]
    elsif (tok = @ss.scan KEYWORD_REGEXP)
      yield [tok.upcase.to_sym, tok]
    elsif (tok = @ss.scan /SELECT\b/i)
      yield [:SELECT, tok + @ss.scan(/.*/)]
    elsif (tok = @ss.scan /NEXT\b/i)
      yield [:NEXT, @ss.scan(/\s*\|\s*.*/)]
    elsif (tok = @ss.scan /NULL\b/i)
      yield [:NULL, nil]
    elsif (tok = @ss.scan /`([^`]|``)*`/)
      yield [:IDENTIFIER, tok.slice(1...-1).gsub(/``/, '`')]
    elsif (tok = @ss.scan /'([^']|'')*'/) #'
      yield [:VALUE, tok.slice(1...-1).gsub(/''/, "'")]
    elsif (tok = @ss.scan /"([^"]|"")*"/) #"
      yield [:VALUE, tok.slice(1...-1).gsub(/""/, '"')]
    elsif (tok = @ss.scan /(0|[1-9]\d*)/)
      yield [:NATURAL_NUMBER, tok.to_i]
    elsif (tok = @ss.scan /[,\(\)\*]/)
      yield [tok, tok]
    elsif (tok = @ss.scan /[a-z_$][-0-9a-z_$.]*\b/i)
      yield [:IDENTIFIER, tok]
    else
      raise Racc::ParseError, ('parse error on value "%s"' % @ss.rest.inspect)
    end
  end

  yield [false, '$']
end
private :scan

def parse
  yyparse self, :scan
end

def self.parse(obj)
  self.new(obj).parse
end

def on_error(error_token_id, error_value, value_stack)
  if @stmt_with_expr
    @stmt_with_expr.expr << (error_value + @ss.scan_until(/\Z/))
  else
    super
  end
end

...end sdb-parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    14,    15,    69,    66,    27,    65,    31,    64,    44,    67,
    67,    29,    16,    45,    65,    17,    64,    46,    18,    19,
    20,    21,    42,    22,    23,   100,    96,    24,    25,    26,
    73,    74,    38,    39,    95,    96,    59,    60,    47,    48,
    49,    45,    50,    51,    52,    53,    54,    57,    57,    41,
    61,    40,    37,    68,    43,    70,    71,    72,    36,    75,
    57,    77,    78,    79,    80,    81,    31,    83,    84,    85,
    86,    87,    89,    90,    91,    93,    94,    33,    97,    98,
    93,    32 ]

racc_action_check = [
     0,     0,    58,    55,     1,    54,    15,    54,    28,    58,
    55,    15,     0,    30,    74,     0,    74,    32,     0,     0,
     0,     0,    26,     0,     0,    99,    99,     0,     0,     0,
    62,    62,    23,    23,    92,    92,    49,    49,    33,    33,
    34,    35,    36,    37,    44,    45,    46,    47,    48,    25,
    52,    24,    22,    57,    27,    59,    60,    61,    21,    66,
    67,    68,    69,    70,    72,    73,    18,    75,    78,    79,
    80,    81,    83,    84,    85,    87,    88,    17,    94,    96,
    97,    16 ]

racc_action_pointer = [
    -1,     4,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     2,    67,    73,    62,   nil,
   nil,    35,    29,     6,    47,    45,    18,    54,     5,   nil,
     1,   nil,    13,    21,    37,    29,    38,    39,   nil,   nil,
   nil,   nil,   nil,   nil,    40,    41,    36,    43,    44,    32,
   nil,   nil,    45,   nil,     1,    -2,   nil,    46,    -3,    50,
    50,    51,    19,   nil,   nil,   nil,    53,    56,    53,    56,
    57,   nil,    57,    50,    10,    60,   nil,   nil,    61,    62,
    62,    61,   nil,    64,    65,    66,   nil,    67,    64,   nil,
   nil,   nil,    23,   nil,    68,   nil,    71,    72,   nil,    14,
   nil ]

racc_action_default = [
   -55,   -55,    -1,    -2,    -3,    -4,    -5,    -6,    -7,    -8,
    -9,   -10,   -11,   -12,   -13,   -15,   -55,   -55,   -40,   -42,
   -43,   -55,   -55,   -55,   -55,   -55,   -55,   -55,   -55,   -16,
   -17,   -51,   -55,   -55,   -55,   -41,   -55,   -55,   -46,   -47,
   -48,   -49,   -50,   101,   -55,   -55,   -55,   -55,   -55,   -55,
   -44,   -45,   -55,   -52,   -55,   -26,   -33,   -55,   -30,   -37,
   -38,   -55,   -55,   -21,   -23,   -24,   -27,   -55,   -55,   -31,
   -55,   -39,   -55,   -55,   -55,   -28,   -34,   -35,   -32,   -55,
   -55,   -55,   -22,   -55,   -55,   -55,   -14,   -55,   -20,   -25,
   -29,   -36,   -55,   -53,   -55,   -18,   -55,   -55,   -54,   -55,
   -19 ]

racc_goto_table = [
    63,    92,    30,    55,    58,    35,    12,     6,     7,     8,
     9,    99,    10,    11,     5,    13,    28,     1,    88,     4,
    82,    62,     3,     2,    76,    34 ]

racc_goto_check = [
    19,    17,    15,    20,    20,    15,    12,     6,     7,     8,
     9,    17,    10,    11,     5,    13,    14,     1,    16,     4,
    19,    18,     3,     2,    21,    22 ]

racc_goto_pointer = [
   nil,    17,    23,    22,    19,    14,     7,     8,     9,    10,
    12,    13,     6,    15,     1,   -13,   -63,   -86,   -33,   -54,
   -44,   -43,     7 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    56,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_13,
  8, 33, :_reduce_14,
  0, 45, :_reduce_15,
  1, 45, :_reduce_16,
  1, 45, :_reduce_none,
  3, 47, :_reduce_18,
  5, 47, :_reduce_19,
  8, 34, :_reduce_20,
  1, 49, :_reduce_21,
  3, 49, :_reduce_22,
  1, 50, :_reduce_none,
  1, 50, :_reduce_none,
  8, 35, :_reduce_25,
  4, 35, :_reduce_26,
  5, 35, :_reduce_27,
  6, 35, :_reduce_28,
  8, 36, :_reduce_29,
  4, 36, :_reduce_30,
  5, 36, :_reduce_31,
  6, 36, :_reduce_32,
  1, 51, :_reduce_33,
  3, 51, :_reduce_34,
  3, 52, :_reduce_35,
  8, 37, :_reduce_36,
  4, 37, :_reduce_37,
  4, 37, :_reduce_38,
  5, 37, :_reduce_39,
  0, 53, :_reduce_40,
  1, 53, :_reduce_none,
  1, 38, :_reduce_42,
  1, 39, :_reduce_43,
  3, 40, :_reduce_44,
  3, 41, :_reduce_45,
  2, 42, :_reduce_46,
  2, 42, :_reduce_47,
  2, 43, :_reduce_48,
  2, 44, :_reduce_49,
  2, 44, :_reduce_50,
  1, 46, :_reduce_51,
  3, 46, :_reduce_52,
  1, 48, :_reduce_53,
  3, 48, :_reduce_54 ]

racc_reduce_n = 55

racc_shift_n = 101

racc_token_table = {
  false => 0,
  :error => 1,
  :GET => 2,
  :FROM => 3,
  :IDENTIFIER => 4,
  :WHERE => 5,
  :ITEMNAME => 6,
  "=" => 7,
  :VALUE => 8,
  "*" => 9,
  "(" => 10,
  ")" => 11,
  "," => 12,
  :INSERT => 13,
  :INTO => 14,
  :VALUES => 15,
  :UPDATE => 16,
  :SET => 17,
  :ADD => 18,
  :DELETE => 19,
  :SELECT => 20,
  :NEXT => 21,
  :CREATE => 22,
  :DOMAIN => 23,
  :DROP => 24,
  :SHOW => 25,
  :DOMAINS => 26,
  :REGIONS => 27,
  :USE => 28,
  :DESC => 29,
  :DESCRIBE => 30 }

racc_nt_base = 31

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "GET",
  "FROM",
  "IDENTIFIER",
  "WHERE",
  "ITEMNAME",
  "\"=\"",
  "VALUE",
  "\"*\"",
  "\"(\"",
  "\")\"",
  "\",\"",
  "INSERT",
  "INTO",
  "VALUES",
  "UPDATE",
  "SET",
  "ADD",
  "DELETE",
  "SELECT",
  "NEXT",
  "CREATE",
  "DOMAIN",
  "DROP",
  "SHOW",
  "DOMAINS",
  "REGIONS",
  "USE",
  "DESC",
  "DESCRIBE",
  "$start",
  "stmt",
  "get_stmt",
  "insert_stmt",
  "update_stmt",
  "merge_stmt",
  "delete_stmt",
  "select_stmt",
  "next_stmt",
  "create_stmt",
  "drop_stmt",
  "show_stmt",
  "use_stmt",
  "desc_stmt",
  "get_output_list",
  "identifier_list",
  "value_list_list",
  "value_list",
  "insert_identifier_list",
  "itemname_identifier",
  "set_clause_list",
  "set_clause",
  "delete_attr_list" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

module_eval(<<'.,.,', 'sdb-parser.y', 17)
  def _reduce_13(val, _values)
               @stmt_with_expr
         
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 22)
  def _reduce_14(val, _values)
                    struct(:GET, :domain => val[3], :item_name => val[7], :attr_names => val[1])
             
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 27)
  def _reduce_15(val, _values)
                          []
                    
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 31)
  def _reduce_16(val, _values)
                          []
                    
  end
.,.,

# reduce 17 omitted

module_eval(<<'.,.,', 'sdb-parser.y', 37)
  def _reduce_18(val, _values)
                          [val[1]]
                    
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 41)
  def _reduce_19(val, _values)
                          val[0] + [val[3]]
                    
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 46)
  def _reduce_20(val, _values)
                      items = val[7].map do |vals|
                    unless val[4].length == vals.length
                      raise Racc::ParseError, 'The number of an attribute and values differs'
                    end

                    attrs = {}
                    val[4].zip(vals).each {|k, v| attrs[k] = v }
                    item_name = attrs.find {|k, v| k =~ /\AitemName\Z/i }

                    unless item_name
                      raise Racc::ParseError,'itemName is not contained in the INSERT statement'
                    end

                    attrs.delete(item_name[0])
                    item_name = item_name[1]

                    [item_name, attrs]
                  end

                  struct(:INSERT, :domain => val[2], :items => items)
                
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 70)
  def _reduce_21(val, _values)
                                 [val[0]]
                           
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 74)
  def _reduce_22(val, _values)
                                 val[0] + [val[2]]
                           
  end
.,.,

# reduce 23 omitted

# reduce 24 omitted

module_eval(<<'.,.,', 'sdb-parser.y', 82)
  def _reduce_25(val, _values)
                      attrs = {}
                  val[3].each {|k, v| attrs[k] = v }
                  struct(:UPDATE, :domain => val[1], :items => [[val[7], attrs]])
                
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 88)
  def _reduce_26(val, _values)
                      attrs = {}
                  val[3].each {|k, v| attrs[k] = v }
                  @stmt_with_expr = struct(:UPDATE_WITH_EXPR, :domain => val[1], :attrs => attrs, :expr => '')
                
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 94)
  def _reduce_27(val, _values)
                      attrs = {}
                  val[3].each {|k, v| attrs[k] = v }
                  @stmt_with_expr = struct(:UPDATE_WITH_EXPR, :domain => val[1], :attrs => attrs, :expr => 'WHERE ')
                
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 100)
  def _reduce_28(val, _values)
                      attrs = {}
                  val[3].each {|k, v| attrs[k] = v }
                  @stmt_with_expr = struct(:UPDATE_WITH_EXPR, :domain => val[1], :attrs => attrs, :expr => 'WHERE itemName')
                
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 107)
  def _reduce_29(val, _values)
                     attrs = {}
                 val[3].each {|k, v| attrs[k] = v }
                 struct(:MERGE, :domain => val[1], :items => [[val[7], attrs]])
               
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 113)
  def _reduce_30(val, _values)
                     attrs = {}
                 val[3].each {|k, v| attrs[k] = v }
                 @stmt_with_expr = struct(:MERGE_WITH_EXPR, :domain => val[1], :attrs => attrs, :expr => '')
               
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 119)
  def _reduce_31(val, _values)
                     attrs = {}
                 val[3].each {|k, v| attrs[k] = v }
                 @stmt_with_expr = struct(:MERGE_WITH_EXPR, :domain => val[1], :attrs => attrs, :expr => 'WHERE ')
               
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 125)
  def _reduce_32(val, _values)
                     attrs = {}
                 val[3].each {|k, v| attrs[k] = v }
                 @stmt_with_expr = struct(:MERGE_WITH_EXPR, :domain => val[1], :attrs => attrs, :expr => 'WHERE itemName')
               
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 132)
  def _reduce_33(val, _values)
                          [val[0]]
                    
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 136)
  def _reduce_34(val, _values)
                          val[0] + [val[2]]
                    
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 141)
  def _reduce_35(val, _values)
                     [val[0], val[2]]
               
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 146)
  def _reduce_36(val, _values)
                      struct(:DELETE, :domain => val[3], :items => [[val[7], val[1]]])
                
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 150)
  def _reduce_37(val, _values)
                      @stmt_with_expr = struct(:DELETE_WITH_EXPR, :domain => val[3], :attrs => val[1],  :expr => '')
                
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 154)
  def _reduce_38(val, _values)
                      @stmt_with_expr = struct(:DELETE_WITH_EXPR, :domain => val[3], :attrs => val[1],  :expr => 'WHERE ')
                
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 158)
  def _reduce_39(val, _values)
                      @stmt_with_expr = struct(:DELETE_WITH_EXPR, :domain => val[3], :attrs => val[1],  :expr => 'WHERE itemName')
                
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 163)
  def _reduce_40(val, _values)
                           []
                     
  end
.,.,

# reduce 41 omitted

module_eval(<<'.,.,', 'sdb-parser.y', 169)
  def _reduce_42(val, _values)
                      query = ''
                  ruby = nil

                  ss = StringScanner.new(val[0])

                  until ss.eos?
                    if (tok = ss.scan %r{[^-`'";\\/#|]+}) #'
                      query << tok
                    elsif (tok = ss.scan /`(?:[^`]|``)*`/)
                      query << tok
                    elsif (tok = ss.scan /'(?:[^']|'')*'/) #'
                      query << tok
                    elsif (tok = ss.scan /"(?:[^"]|"")*"/) #"
                      query << tok
                    elsif (tok = ss.scan /\|/)
                      ruby = ss.scan_until(/\Z/)
                    elsif (tok = ss.scan /./)
                      query << tok
                    end
                  end

                  struct(:SELECT, :query => query, :ruby => ruby)
                
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 195)
  def _reduce_43(val, _values)
                    ruby = val[0].sub(/\A\s*\|\s*/, '') if val[0]
                struct(:NEXT, :ruby => ruby)
              
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 201)
  def _reduce_44(val, _values)
                      struct(:CREATE, :domain => val[2])
                
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 206)
  def _reduce_45(val, _values)
                    struct(:DROP, :domain => val[2])
              
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 211)
  def _reduce_46(val, _values)
                    struct(:SHOW, :operand => :domains)
              
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 215)
  def _reduce_47(val, _values)
                    struct(:SHOW, :operand => :regions)
              
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 219)
  def _reduce_48(val, _values)
                   struct(:USE, :endpoint => val[1])
             
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 223)
  def _reduce_49(val, _values)
                    struct(:DESCRIBE, :domain => val[1])
              
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 227)
  def _reduce_50(val, _values)
                    struct(:DESCRIBE, :domain => val[1])
              
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 232)
  def _reduce_51(val, _values)
                         [val[0]]
                   
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 236)
  def _reduce_52(val, _values)
                         val[0] + [val[2]]
                   
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 241)
  def _reduce_53(val, _values)
                     [val[0]]
               
  end
.,.,

module_eval(<<'.,.,', 'sdb-parser.y', 245)
  def _reduce_54(val, _values)
                     [val[0], val[2]].flatten
               
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

end   # class Parser


end # module SimpleDB
